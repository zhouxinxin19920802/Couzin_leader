# l = [[38,39,47,35],
#      [2,7,3],
#      [1,4,20],
#      [1],
#      [2,5,8],
#      [4],
#      [7,8,13],
#      [1,6],
#      [4,6,9],
#      [8,14],
#      [2,15],
#      [16],
#      [16],
#      [6,16],
#      [9,15],
#      [14,20],
#      [17,23,13,12,11,100,101],
#      [16],
#      [19,99,98,23],
#      [20,18],
#      [21,19],
#      [22,20],
#      [92,102,103,21],
#      [24,18,16],
#      [25,104,23,30,32],
#      [26,24],
#      [25,28,30],
#      [28,29],
#      [26,27,34],
#      [27,28],
#      [26,105,24,31,33],
#      [30,32],
#      [24,31,107,106,33],
#      [32,30],
#      [28,35],
#      [34,36],
#      [35,37,90,50],
#      [46,36],
#      [39,40],
#      [38,41,49],
#      [38],
#      [39,42,49],
#      [41,43],
#      [42,44],
#      [43,47],
#      [46,47,48],
#      [45,37,63],
#      [44,49,45],
#      [113,114,115,116,117,118,119,45],
#      [39,41,47,65],
#      [36,52,54],
#      [90,108,52],
#      [50,51,53,109],
#      [52,60,110,111,112],
#      [50,120,121,122],
#      [49,56],
#      [55,57,59],
#      [56,58],
#      [57,59,61],
#      [56,58,63,145],
#      [53,68],
#      [58,62],
#      [61],
#      [46,59,64],
#      [63,126,127,75,77,66],
#      [49,75,77],
#      [64,128,69],
#      [68,144],
#      [60,67],
#      [66,71],
#      [71,129,130],
#      [70,131,132,133,134,144],
#      [73,135,136],
#      [72,76],
#      [76,77,137],
#      [64,77,65],
#      [73,74],
#      [65,75,78,138,146],
#      [77,81,139,140],
#      [80],
#      [79,81],
#      [80,83,86,141,142],
#      [77],
#      [81],
#      [85,143],
#      [84,86,87],
#      [81,85],
#      [85,89],
#      [81,89],
#      [87,88],
#      [36,51],
#      [64,123,124,125],
#      [93,22],
#      [92,94,95],
#      [93],
#      [93,96],
#      [95,97],
#      [96],
#      [18],
#      [18],
#      [16],
#      [16],
#      [22],
#      [22],
#      [24],
#      [30],
#      [32],
#      [32],
#      [51],
#      [52],
#      [53],
#      [53],
#      [53],
#      [48],
#      [48],
#      [48],
#      [48],
#      [48],
#      [48],
#      [48],
#      [54],
#      [54],
#      [54],
#      [91],
#      [91],
#      [91],
#      [64],
#      [64],
#      [66],
#      [70],
#      [70],
#      [71],
#      [71],
#      [71],
#      [71],
#      [72],
#      [72],
#      [74],
#      [77],
#      [78],
#      [78],
#      [81],
#      [81],
#      [84],
#      [67,71],
#      [59],
#      [77,-1]
#      ]

import logging
logging.basicConfig(level=logging.DEBUG,#控制台打印的日志级别
                    filename='test.txt',
                    filemode='w',##模式，有w和a，w就是写模式，每次都会重新写日志，覆盖之前的日志
                    #a是追加模式，默认如果不写的话，就是追加模式
                    format=
                    '%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'
                    #日志格式
                    )

l=[[1,2],[0,2],[1,3],[2,4,5],[3],[3]]
def bifurcation_node_find(node,path):
    bifurcation_node = 0
    if len(l[node])>=2:
        bifurcation_node = node
        return  bifurcation_node,l[node]
    else:
        path.append(node)
    node = l[node][0]
    while len(l[node])==2:
        path.append(node)
        logging.info("path:%s", str(path))
        if set(l[node]).issubset(path):
            break
        for item in l[node]:
            if item not in path:
                node = item
    cons = []
    path.append(node)
    logging.info("path1:%s", str(path))
    for item in l[node]:
        if item not in path:
            cons.append(item)

    return node, cons


path = []
cons1,cons2 = bifurcation_node_find(0,path)
print(cons1)
print(cons2)
print(path)
